<?xml version="1.0" encoding="ISO-8859-1"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- declaring chart element -->
    <xs:element name="chart">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="categories" minOccurs="0" maxOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
                            <!-- xs:choice for vLine  -->
                            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <!-- define category element -->
                                <xs:element name="category" minOccurs="0" maxOccurs="unbounded">
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer"/>
                                        <xs:attribute name="label" type="xs:string"/>
                                        <xs:attribute name="lineDashed" type="xs:boolean"/>
                                        <xs:attribute name="showVerticalLine" type="xs:boolean"/>
                                        <xs:attribute name="showLabel" type="xs:boolean"/>
                                        <xs:attribute name="toolText" type="xs:string"/>
                  <!-- end of category element attributes -->
                                    </xs:complexType>
                                </xs:element>
                                      <!-- vLine Vertical data separator lines -->
                                <xs:element name='vLine'>
                                    <xs:complexType>
                                        <xs:attribute name='color' type='xs:hexBinary' />
                                        <xs:attribute name='thickness' type='xs:nonNegativeInteger' />
                                        <xs:attribute name="alpha">             <!-- 0 to 100 -->
                                            <xs:simpleType>
                                                <xs:restriction base="xs:nonNegativeInteger">
                                                    <xs:maxExclusive value="101"/>
                                                </xs:restriction>
                                            </xs:simpleType>
                                        </xs:attribute>
                                        <xs:attribute name='dashed' type='xs:boolean' />
                                        <xs:attribute name='dashLen' type='xs:nonNegativeInteger' />
                                        <xs:attribute name='dashGap' type='xs:nonNegativeInteger' />
                                        <xs:attribute name='label' type='xs:string' />
                                    </xs:complexType>
                                </xs:element>
                    <!-- End of vLine Vertical data separator lines -->
                            </xs:choice>
                <!-- End of choice -->

                        </xs:sequence>
                        <xs:attribute name="font" type="xs:string"/>
                        <xs:attribute name="fontSize" type="xs:integer"/>
                        <xs:attribute name="fontColor" type="xs:hexBinary"/>
                        <xs:attribute name="verticalLineColor" type="xs:hexBinary"/>
                        <xs:attribute name="verticalLineThickness" type="xs:integer"/>
                        <xs:attribute name="verticalLineAlpha">             <!-- value (0 - 100) -->
                            <xs:simpleType>
                                <xs:restriction base="xs:nonNegativeInteger">
                                    <xs:maxExclusive value="101"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="verticalLineDashed" type="xs:boolean"/>
                        <xs:attribute name="verticalLineDashLen" type="xs:integer"/>
                        <xs:attribute name="verticalLineDashGap" type="xs:integer"/>
                    </xs:complexType>
                </xs:element>
        <!-- end of categories element -->

        <!-- define dataset element -->
                <xs:element name="dataset" minOccurs="0" maxOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
              <!-- define set element attributes -->
                            <xs:element name="set" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="open" type="xs:integer"/>
                                    <xs:attribute name="close" type="xs:integer"/>
                                    <xs:attribute name="high" type="xs:integer"/>
                                    <xs:attribute name="low" type="xs:integer"/>
                                    <xs:attribute name="volume" type="xs:integer"/>
                                    <xs:attribute name="x" type="xs:integer"/>
                                    <xs:attribute name="valuetext" type="xs:string"/>
                                    <xs:attribute name="color" type="xs:hexBinary"/>
                                    <xs:attribute name="bordercolor" type="xs:hexBinary"/>
                                    <xs:attribute name="alpha">             <!-- value (0 - 100) -->
                                        <xs:simpleType>
                                            <xs:restriction base="xs:nonNegativeInteger">
                                                <xs:maxExclusive value="101"/>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                    <xs:attribute name="dashed" type="xs:boolean"/>
                                    <xs:attribute name="link" type="xs:string"/>
                                    <xs:attribute name="toolText" type="xs:string"/>
                                </xs:complexType>
                            </xs:element>
              <!-- end of set element attributes -->
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
        <!-- end of element dataset -->


        <!-- define trendset element -->
                <xs:element name="trendset" minOccurs="0" maxOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
              <!-- define set element attributes -->
                            <xs:element name="set" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="x" type="xs:integer"/>
                                    <xs:attribute name="value" type="xs:integer"/>
                                </xs:complexType>
                            </xs:element>
              <!-- end of set element attributes -->
                        </xs:sequence>
                        <xs:attribute name="name" type="xs:string"/>
                        <xs:attribute name="color" type="xs:hexBinary"/>
                        <xs:attribute name="alpha">             <!-- value (0 - 100) -->
                            <xs:simpleType>
                                <xs:restriction base="xs:nonNegativeInteger">
                                    <xs:maxExclusive value="101"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="thickness" type="xs:integer"/>
                        <xs:attribute name="includeinlegend" type="xs:boolean"/>
                        <xs:attribute name="dashed" type="xs:boolean"/>
                        <xs:attribute name="dashlen" type="xs:integer"/>
                    </xs:complexType>
                </xs:element>
        <!-- end of element trendset -->

        <!-- define vTrendLines element -->
                <xs:element name="vTrendLines" minOccurs="0" maxOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
              <!-- define set element attributes -->
                            <xs:element name="line" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="startValue" type="xs:integer"/>
                                    <xs:attribute name="endValue" type="xs:integer"/>
                                    <xs:attribute name="displayValue" type="xs:string"/>
                                    <xs:attribute name="color" type="xs:hexBinary"/>
                                    <xs:attribute name="isTrendZone" type="xs:boolean"/>
                                    <xs:attribute name="showOnTop" type="xs:boolean"/>
                                    <xs:attribute name="thickness" type="xs:integer"/>
                                    <xs:attribute name="alpha">             <!-- value (0 - 100) -->
                                        <xs:simpleType>
                                            <xs:restriction base="xs:nonNegativeInteger">
                                                <xs:maxExclusive value="101"/>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                    <xs:attribute name="dashed" type="xs:boolean"/>
                                    <xs:attribute name="dashLen" type="xs:integer"/>
                                    <xs:attribute name="dashGap" type="xs:integer"/>
                                </xs:complexType>
                            </xs:element>
              <!-- end of set element attributes -->
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
        <!-- end of element vTrendLines -->

     <!-- styles element -->
                <xs:element name="styles" minOccurs="0" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:sequence>
         <!-- style definition element -->
                            <xs:element name="definition" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:sequence>
               <!-- styles definition style element -->
                                        <xs:element name="style" minOccurs="0" maxOccurs="unbounded">
                 <!-- style element attributes -->
                                            <xs:complexType>
                                                <xs:attribute name="name" type="xs:string"/>
                                                <xs:attribute name="type" type="xs:string"/>
                                                <xs:attribute name="font" type="xs:string"/>
                                                <xs:attribute name="size" type="xs:integer"/>
                                                <xs:attribute name="color" type="xs:hexBinary"/>
                                                <xs:attribute name="bold" type="xs:boolean"/>
                                                <xs:attribute name="italic" type="xs:boolean"/>
                                                <xs:attribute name="underline" type="xs:boolean"/>
                                                <xs:attribute name="bgColor" type="xs:hexBinary"/>
                                                <xs:attribute name="borderColor" type="xs:hexBinary"/>
                                                <xs:attribute name="isHTML" type="xs:string"/>
                                                <xs:attribute name="leftMargin" type="xs:integer"/>
                                                <xs:attribute name="letterSpacing" type="xs:integer"/>

                                                <xs:attribute name="param">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:string">
                                                            <xs:enumeration value="_x"/>
                                                            <xs:enumeration value="_y"/>
                                                            <xs:enumeration value="_xScale"/>
                                                            <xs:enumeration value="_yScale"/>
                                                            <xs:enumeration value="_alpha"/>
                                                            <xs:enumeration value="_rotation"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="start" type="xs:integer"/>  <!-- this attribute got some string values too -->
                                                <xs:attribute name="duration" type="xs:nonNegativeInteger"/>
                                                <xs:attribute name="easing">      <!--  "elastic", "bounce", "regular", "strong" or "none" -->
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:string">
                                                            <xs:enumeration value="elastic"/>
                                                            <xs:enumeration value="bounce"/>
                                                            <xs:enumeration value="regular"/>
                                                            <xs:enumeration value="strong"/>
                                                            <xs:enumeration value="none"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="distance" type="xs:integer"/>
                                                <xs:attribute name="angle">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="361"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="alpha">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="101"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="blurX">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">       <!-- 0 to 255 -->
                                                            <xs:maxExclusive value="256"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="blurY">                              <!-- 0 to 255 -->
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="256"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="strength">                         <!-- 0 to 255 -->
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="256"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="quality">                     <!-- 0 to 15 -->
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="16"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="properties" type="xs:string"/>
                                                <xs:attribute name="shadowColor" type="xs:hexBinary"/>
                                                <xs:attribute name="shadowAlpha">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="101"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="highlightColor" type="xs:hexBinary"/>
                                                <xs:attribute name="highlightAlpha">                 <!-- 0 to 100 -->
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:nonNegativeInteger">
                                                            <xs:maxExclusive value="101"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                            </xs:complexType>
                   <!-- end of style element attributes -->
                                        </xs:element>
                 <!-- end of style element -->
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
            <!-- end of defination element -->

            <!-- style application element  -->
                            <xs:element name="application" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:sequence>
                <!-- style application apply element  -->
                                        <xs:element name="apply" minOccurs="0" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attribute name="toObject" type="xs:string"/>
                                                <xs:attribute name="styles" type="xs:string"/>
                                            </xs:complexType>
                                        </xs:element>
                <!-- end of apply -->
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
            <!-- end of application -->
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
    <!-- end of styles -->
            </xs:sequence>
        
		<!-- Chart element Attributes -->
		<!-- Functional Attributes -->
            <xs:attribute name="animation" type="xs:boolean"/>
            <xs:attribute name="plotPriceAs">       <!-- CANDLESTICK, LINE OR BAR  -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="CANDLESTICK"/>
                        <xs:enumeration value="LINE"/>
                        <xs:enumeration value="BAR"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="plotClosingPrice" type="xs:boolean"/>
            <xs:attribute name="palette">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="6"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="paletteColors" type="xs:string"/>       <!-- 'FF0000,0372AB,FF5904...' -->
            <xs:attribute name="showAboutMenuItem" type="xs:boolean"/>
            <xs:attribute name="aboutMenuItemLabel" type="xs:string"/>
            <xs:attribute name="aboutMenuItemLink" type="xs:string"/>
            <xs:attribute name="showVolumeChart" type="xs:boolean"/>
            <xs:attribute name="volumeHeightPercent">   <!-- 20 to 80 %) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:minExclusive value="20"/>
                        <xs:maxExclusive value="81"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="showPrintMenuItem" type="xs:double"/>
            <xs:attribute name="showZeroPlaneValue" type="xs:double"/>
            <xs:attribute name="showTooltipforWrappedLabels" type="xs:double"/>
            <xs:attribute name="uneScapeLinks" type="xs:double"/>
            <xs:attribute name="showVLineLabelBorder" type="xs:double"/>
            <xs:attribute name="xAxisMinValue" type="xs:double"/>
            <xs:attribute name="xAxisMaxValue" type="xs:double"/>
            <xs:attribute name="PYAxisMaxValue" type="xs:integer"/>
            <xs:attribute name="PYAxisMinValue" type="xs:integer"/>
            <xs:attribute name="VYAxisMinValue" type="xs:integer"/>
            <xs:attribute name="VYAxisMaxValue" type="xs:integer"/>
            <xs:attribute name="showLabels" type="xs:boolean"/>
            <xs:attribute name="labelDisplay">   <!-- WRAP, STAGGER, ROTATE or NONE   -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="WRAP"/>
                        <xs:enumeration value="STAGGER"/>
                        <xs:enumeration value="ROTATE"/>
                        <xs:enumeration value="NONE"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="useEllipsesWhenOverflow" type="xs:boolean"/>
            <xs:attribute name="rotateLabels" type="xs:boolean"/>
            <xs:attribute name="slantLabels" type="xs:boolean"/>
            <xs:attribute name="labelStep" type="xs:integer"/>
            <xs:attribute name="rotateValues" type="xs:boolean"/>
            <xs:attribute name="staggerLines" type="xs:integer"/>
            <xs:attribute name="showYAxisValues" type="xs:boolean"/>
            <xs:attribute name="yAxisValuesStep" type="xs:integer"/>
            <xs:attribute name="adjustDiv" type="xs:boolean"/>
            <xs:attribute name="rotateYAxisName" type="xs:boolean"/>
            <xs:attribute name="yAxisNameWidth" type="xs:integer"/>
            <xs:attribute name="defaultAnimation" type="xs:boolean"/>
            <xs:attribute name="clickURL" type="xs:string"/>
            <xs:attribute name="setAdaptiveYMin" type="xs:boolean"/>

        <!-- defining Chart Titles and Axis Names Attributes -->
            <xs:attribute name="caption" type="xs:string"/>
            <xs:attribute name="subCaption" type="xs:string"/>
            <xs:attribute name="PYAxisName" type="xs:string"/>
            <xs:attribute name="VYAxisName" type="xs:string"/>

        <!-- Chart Cosmetics Attributes -->
            <xs:attribute name="showBorder" type="xs:boolean"/>
            <xs:attribute name="borderColor" type="xs:hexBinary"/>
            <xs:attribute name="borderThickness" type="xs:nonNegativeInteger"/>
            <xs:attribute name="borderAlpha">             <!-- value (0 - 100) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="bgColor" type="xs:hexBinary"/>
            <xs:attribute name="bgAlpha">               <!-- value (0 - 100) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="bgRatio">               <!-- value (0 - 100) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="bgAngle">               <!-- value (0 - 360) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="361"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="bgSWF" type="xs:string"/>
            <xs:attribute name="bgSWFAlpha">             <!-- value (0 - 100) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="canvasBgColor" type="xs:hexBinary"/>
            <xs:attribute name="canvasBgAlpha" type="xs:string"/> <!--  colors separated by commas for gradient -->
            <xs:attribute name="canvasBgRatio">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="canvasBgAngle" type="xs:integer"/>
            <xs:attribute name="canvasBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="canvasBorderThickness" type="xs:integer"/>
            <xs:attribute name="canvasBorderAlpha">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="logoURL" type="xs:string"/>
            <xs:attribute name="logoPosition">       <!-- logo position (TL, TR, BL, BR, CC)  -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="TL"/>
                        <xs:enumeration value="TR"/>
                        <xs:enumeration value="BL"/>
                        <xs:enumeration value="BR"/>
                        <xs:enumeration value="CC"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="logoAlpha">               <!-- value (0 - 100) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="logoScale">               <!-- value (0 - 300) -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="301"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="logoLink" type="xs:string"/>

      <!-- Data Plot Cosmetics Attributes -->
            <xs:attribute name="bearBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="bearFillColor" type="xs:hexBinary"/>
            <xs:attribute name="bullBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="bullFillColor" type="xs:hexBinary"/>
            <xs:attribute name="rollOverBandColor" type="xs:hexBinary"/>
            <xs:attribute name="rollOverBandAlpha">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="showShadow" type="xs:boolean"/>
            <xs:attribute name="showVPlotBorder" type="xs:boolean"/>
            <xs:attribute name="vPlotBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="vPlotBorderThickness" type="xs:integer"/>
            <xs:attribute name="vPlotBorderAlpha">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="plotLineThickness" type="xs:integer"/>
            <xs:attribute name="plotLineAlpha">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="plotLineDashLen" type="xs:integer"/>
            <xs:attribute name="plotLineDashGap" type="xs:integer"/>

      <!-- Anchors Attributes -->
            <xs:attribute name="drawAnchors" type="xs:boolean"/>
            <xs:attribute name="anchorSides">                    <!-- 3 to 72 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="73"/>
                        <xs:minExclusive value="2"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="anchorRadius" type="xs:integer"/>
            <xs:attribute name="anchorBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="anchorBorderThickness" type="xs:integer"/>
            <xs:attribute name="anchorBgColor" type="xs:hexBinary"/>
            <xs:attribute name="anchorAlpha">                    <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="anchorBgAlpha">                    <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>

      <!-- Divisional Lines & Grids Attributes -->
            <xs:attribute name="numPDivLines" type="xs:integer"/>
            <xs:attribute name="numVDivLines" type="xs:integer"/>
            <xs:attribute name="alternateHGridAlpha">       <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="divLineColor" type="xs:hexBinary"/>
            <xs:attribute name="divLineThickness">              <!-- 1 to 5 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="6"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="divLineAlpha">       <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="divLineIsDashed" type="xs:boolean"/>
            <xs:attribute name="divLineDashLen" type="xs:integer"/>
            <xs:attribute name="divLineDashGap" type="xs:integer"/>
            <xs:attribute name="showAlternateHGridColor" type="xs:boolean"/>
            <xs:attribute name="alternateHGridColor" type="xs:hexBinary"/>
            <xs:attribute name="showAlternateVGridColor" type="xs:boolean"/>
            <xs:attribute name="alternateVGridColor" type="xs:hexBinary"/>
            <xs:attribute name="alternateVGridAlpha">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>

      <!-- Legend Properties Attributes -->
            <xs:attribute name="showLegend" type="xs:boolean"/>
            <xs:attribute name="legendPosition">        <!--  BOTTOM or RIGHT    -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="BOTTOM"/>
                        <xs:enumeration value="RIGHT"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="legendCaption" type="xs:string"/>
            <xs:attribute name="legendIconScale" >
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="6"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="legendMarkerCircle" type="xs:boolean"/>
            <xs:attribute name="legendBgColor" type="xs:hexBinary"/>
            <xs:attribute name="legendBgAlpha">       <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="legendBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="legendBorderThickness" type="xs:integer"/>
            <xs:attribute name="legendBorderAlpha">       <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="legendShadow" type="xs:boolean"/>
            <xs:attribute name="legendAllowDrag" type="xs:boolean"/>
            <xs:attribute name="legendScrollBgColor" type="xs:hexBinary"/>
            <xs:attribute name="legendScrollBarColor" type="xs:hexBinary"/>
            <xs:attribute name="legendScrollBtnColor" type="xs:hexBinary"/>
            <xs:attribute name="reverseLegend" type="xs:boolean"/>
            <xs:attribute name="legendNumColumns" type="xs:integer"/>
            <xs:attribute name="minimiseWrappingInLegend" type="xs:boolean"/>

	<!-- Number Formatting Attributes -->
            <xs:attribute name="formatNumber" type="xs:boolean"/>
            <xs:attribute name="formatNumberScale" type="xs:boolean"/>
            <xs:attribute name="defaultNumberScale" type="xs:string"/>
            <xs:attribute name="numberScaleUnit" type="xs:string"/>
            <xs:attribute name="numberScaleValue" type="xs:string"/>
            <xs:attribute name="numberPrefix" type="xs:string"/>
            <xs:attribute name="numberSuffix" type="xs:string"/>
            <xs:attribute name="decimalSeparator" type="xs:string"/>
            <xs:attribute name="thousandSeparator" type="xs:string"/>
            <xs:attribute name="inDecimalSeparator" type="xs:string"/>
            <xs:attribute name="inThousandSeparator" type="xs:string"/>
            <xs:attribute name="decimals">		<!-- 0 to 10 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="11"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="forceDecimals" type="xs:boolean"/>
            <xs:attribute name="forceYAxisValueDecimals" type="xs:boolean"/>
            <xs:attribute name="yAxisValueDecimals">             <!-- 0 to 10 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="11"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="vFormatNumber" type="xs:boolean"/>
            <xs:attribute name="vFormatNumberScale" type="xs:boolean"/>
            <xs:attribute name="vDefaultNumberScale" type="xs:string"/>
            <xs:attribute name="vNumberScaleUnit" type="xs:string"/>
            <xs:attribute name="vNumberScaleValue" type="xs:string"/>
            <xs:attribute name="vNumberPrefix" type="xs:string"/>
            <xs:attribute name="vNumberSuffix" type="xs:string"/>
            <xs:attribute name="vDecimals">		<!-- 0 to 10 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="11"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>


      <!-- Font Properties Attributes -->
            <xs:attribute name="baseFont" type="xs:string"/>
            <xs:attribute name="baseFontSize">                    <!-- 0 to 72 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="73"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="baseFontColor" type="xs:hexBinary"/>
            <xs:attribute name="outCnvBaseFont" type="xs:string"/>
            <xs:attribute name="outCnvBaseFontSize">                    <!-- 0 to 72 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="73"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="outCnvBaseFontColor" type="xs:hexBinary"/>

      <!-- Tool-tip Attributes -->
            <xs:attribute name="showToolTip" type="xs:boolean"/>
            <xs:attribute name="toolTipBgColor" type="xs:hexBinary"/>
            <xs:attribute name="toolTipBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="toolTipSepChar" type="xs:string"/>
            <xs:attribute name="showToolTipShadow" type="xs:boolean"/>
	  
      <!-- Chart Padding & Margins Attributes -->
            <xs:attribute name="captionPadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="yAxisNamePadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="yAxisValuesPadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="labelPadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="chartLeftMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="chartRightMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="chartTopMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="chartBottomMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="valuePadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="legendPadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="canvasPadding" type="xs:nonNegativeInteger"/>
            <xs:attribute name="plotSpacePercent" type="xs:nonNegativeInteger"/>
            <xs:attribute name="canvasLeftMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="canvasRightMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="canvasTopMargin" type="xs:nonNegativeInteger"/>
            <xs:attribute name="canvasBottomMargin" type="xs:nonNegativeInteger"/>

      <!-- cosmetic and functional properties of all trend-sets -->
            <xs:attribute name="trendSetColor" type="xs:hexBinary"/>
            <xs:attribute name="trendSetAlpha">     <!-- 0 to 100 -->
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:maxExclusive value="101"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="trendSetThickness" type="xs:integer"/>
            <xs:attribute name="trendSetDashed" type="xs:boolean"/>
            <xs:attribute name="trendSetDashLen" type="xs:integer"/>
            <xs:attribute name="trendSetDashGap" type="xs:integer"/>


      <!-- Exporting charts as PDF/Images > XML Attributes -->
            <xs:attribute name="exportEnabled" type="xs:boolean"/>
            <xs:attribute name="exportShowMenuItem" type="xs:boolean"/>
            <xs:attribute name="exportFormats" type="xs:string"/>
            <xs:attribute name="exportAtClient" type="xs:boolean"/>
            <xs:attribute name="exportHandler" type="xs:string"/>
            <xs:attribute name="exportAction">       <!-- logo position ('save' or 'download')  -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="save"/>
                        <xs:enumeration value="download"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="exportTargetWindow">       <!-- logo position (_self or _blank)  -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="_self"/>
                        <xs:enumeration value="_blank"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="exportCallback" type="xs:string"/>
            <xs:attribute name="exportFileName" type="xs:string"/>
            <xs:attribute name="showExportDialog" type="xs:boolean"/>
            <xs:attribute name="exportDialogMessage" type="xs:string"/>
            <xs:attribute name="exportDialogColor" type="xs:hexBinary"/>
            <xs:attribute name="exportDialogBorderColor" type="xs:hexBinary"/>
            <xs:attribute name="exportDialogFontColor" type="xs:hexBinary"/>
            <xs:attribute name="exportDialogPBColor" type="xs:hexBinary"/>

        <!-- Setting up the chart to export data from context menu  -->
            <xs:attribute name="showExportDataMenuItem" type="xs:boolean"/>

        <!-- Customizing the output CSV format  -->
            <xs:attribute name="exportDataSeparator">       <!-- logo position ( {tab} or {quot} {apos} )  -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="{tab}"/>
                        <xs:enumeration value="{quot}"/>
                        <xs:enumeration value="{apos}"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="exportDataQualifier">       <!-- logo position ( {tab} or {quot} {apos} )  -->
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="{tab}"/>
                        <xs:enumeration value="{quot}"/>
                        <xs:enumeration value="{apos}"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="exportDataFormattedVal" type="xs:boolean"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
